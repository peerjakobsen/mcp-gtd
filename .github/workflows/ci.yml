name: CI

on:
  push:
    branches: ["**"] # Run CI on all branches
  pull_request:
    branches: [main] # PRs only target main branch

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --extra dev

      # CI workflow only checks without auto-fixing, unlike PR workflow
      - name: Run Ruff linting
        run: uv run ruff check .

      - name: Run Ruff formatting check
        run: uv run ruff format --check .

      - name: Run mypy type checking
        run: uv run mypy src/

      - name: Run bandit security check
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run tests with coverage
        run: uv run pytest --cov=gtd_manager --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: src

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Test MCP protocol compliance
        run: |
          uv run python -c "
          import sys
          from io import StringIO

          # Capture stdout and stderr separately
          old_stdout, old_stderr = sys.stdout, sys.stderr
          captured_stdout = StringIO()
          captured_stderr = StringIO()

          try:
              sys.stdout = captured_stdout
              sys.stderr = captured_stderr

              # Import server instance - this should not contaminate stdout
              from gtd_manager.server import server

              stdout_content = captured_stdout.getvalue()
              if stdout_content:
                  print('ERROR: Server import contaminated stdout: ' + repr(stdout_content), file=sys.__stderr__)
                  sys.exit(1)
              else:
                  print('✓ MCP protocol compliance verified: stdout clean', file=sys.__stderr__)

          finally:
              sys.stdout = old_stdout
              sys.stderr = old_stderr
          "
        env:
          PYTHONPATH: src

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Build package
        run: uv build

      - name: Test package installation
        run: |
          uv pip install dist/*.whl
          uv run python -c "import gtd_manager; print('✓ Package import successful')"
          timeout 5s uv run gtd-manager 2>/dev/null || echo "✓ Console script test completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Test FastMCP server startup
        run: |
          timeout 10s uv run python -m gtd_manager.server || true
          echo "Server startup test completed"
        env:
          PYTHONPATH: src

      - name: Test uvx installation simulation
        run: |
          # Simulate uvx installation by testing the built package
          uv build
          uv pip install dist/*.whl
          # Verify package can be imported
          uv run python -c "import gtd_manager; print('✓ Package import successful')"
          # Verify console script exists and can be executed (with timeout)
          timeout 5s uv run gtd-manager 2>/dev/null || echo "✓ Console script installation verified"
